// Code generated by MockGen. DO NOT EDIT.
// Source: ./secret.go

// Package repo is a generated GoMock package.
package repo

import (
	ecdsa "crypto/ecdsa"
	reflect "reflect"
	entity "shop/internal/app/entity"

	jwt "github.com/golang-jwt/jwt"
	gomock "github.com/golang/mock/gomock"
)

// MockSecretRepo is a mock of SecretRepo interface.
type MockSecretRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSecretRepoMockRecorder
}

// MockSecretRepoMockRecorder is the mock recorder for MockSecretRepo.
type MockSecretRepoMockRecorder struct {
	mock *MockSecretRepo
}

// NewMockSecretRepo creates a new mock instance.
func NewMockSecretRepo(ctrl *gomock.Controller) *MockSecretRepo {
	mock := &MockSecretRepo{ctrl: ctrl}
	mock.recorder = &MockSecretRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretRepo) EXPECT() *MockSecretRepoMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockSecretRepo) CreateToken(username string) (*entity.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", username)
	ret0, _ := ret[0].(*entity.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockSecretRepoMockRecorder) CreateToken(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockSecretRepo)(nil).CreateToken), username)
}

// JWTIssuer mocks base method.
func (m *MockSecretRepo) JWTIssuer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWTIssuer")
	ret0, _ := ret[0].(string)
	return ret0
}

// JWTIssuer indicates an expected call of JWTIssuer.
func (mr *MockSecretRepoMockRecorder) JWTIssuer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWTIssuer", reflect.TypeOf((*MockSecretRepo)(nil).JWTIssuer))
}

// ParseJWT mocks base method.
func (m *MockSecretRepo) ParseJWT(token string) (jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWT", token)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWT indicates an expected call of ParseJWT.
func (mr *MockSecretRepoMockRecorder) ParseJWT(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWT", reflect.TypeOf((*MockSecretRepo)(nil).ParseJWT), token)
}

// PrivateKey mocks base method.
func (m *MockSecretRepo) PrivateKey() *ecdsa.PrivateKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateKey")
	ret0, _ := ret[0].(*ecdsa.PrivateKey)
	return ret0
}

// PrivateKey indicates an expected call of PrivateKey.
func (mr *MockSecretRepoMockRecorder) PrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateKey", reflect.TypeOf((*MockSecretRepo)(nil).PrivateKey))
}

// PublicKey mocks base method.
func (m *MockSecretRepo) PublicKey() *ecdsa.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(*ecdsa.PublicKey)
	return ret0
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockSecretRepoMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockSecretRepo)(nil).PublicKey))
}
