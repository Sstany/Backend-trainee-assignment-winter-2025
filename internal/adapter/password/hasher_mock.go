// Code generated by MockGen. DO NOT EDIT.
// Source: ./pass_hasher.go

// Package password is a generated GoMock package.
package password

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPassHasher is a mock of PassHasher interface.
type MockPassHasher struct {
	ctrl     *gomock.Controller
	recorder *MockPassHasherMockRecorder
}

// MockPassHasherMockRecorder is the mock recorder for MockPassHasher.
type MockPassHasherMockRecorder struct {
	mock *MockPassHasher
}

// NewMockPassHasher creates a new mock instance.
func NewMockPassHasher(ctrl *gomock.Controller) *MockPassHasher {
	mock := &MockPassHasher{ctrl: ctrl}
	mock.recorder = &MockPassHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPassHasher) EXPECT() *MockPassHasherMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockPassHasher) Compare(password, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", password, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *MockPassHasherMockRecorder) Compare(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockPassHasher)(nil).Compare), password, hash)
}

// Hash mocks base method.
func (m *MockPassHasher) Hash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockPassHasherMockRecorder) Hash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockPassHasher)(nil).Hash), password)
}
